/**
 * üß™ TESTE COMPLETO DO SISTEMA DE PAGAMENTO
 * 
 * Este script testa todo o fluxo:
 * 1. Valida√ß√£o de c√≥digo de convite
 * 2. Cria√ß√£o de membro
 * 3. Pagamento PIX via Mercado Pago
 * 4. Pagamento Cart√£o via Mercado Pago
 */

const BASE_URL = 'http://localhost:3000'; // Ajuste se necess√°rio

// Dados de teste
const TESTE_DADOS = {
  codigo_convite: 'VIP-011374ee', // Use um c√≥digo v√°lido do banco
  cpf: '123.456.789-00',
  nome: 'Jo√£o Silva Teste',
  email: 'joao.teste@email.com',
  telefone: '(11) 99999-9999',
  data_nascimento: '15/05/1990',
  endereco: {
    rua: 'Rua das Flores, 123',
    numero: '123',
    bairro: 'Centro',
    cidade: 'S√£o Paulo',
    estado: 'SP',
    cep: '01234-567'
  },
  bar_id: 1
};

// Fun√ß√£o para fazer requisi√ß√µes HTTP
async function fazerRequisicao(url, options = {}) {
  console.log(`\nüåê Fazendo requisi√ß√£o para: ${url}`);
  console.log(`üì¶ M√©todo: ${options.method || 'GET'}`);
  
  if (options.body) {
    console.log(`üìÑ Body:`, JSON.parse(options.body));
  }

  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    const data = await response.json();
    
    console.log(`‚úÖ Status: ${response.status}`);
    console.log(`üìã Resposta:`, data);
    
    return { response, data };
  } catch (error) {
    console.error(`‚ùå Erro na requisi√ß√£o:`, error);
    throw error;
  }
}

// 1. Testar valida√ß√£o de c√≥digo
async function testarValidacaoCodigo() {
  console.log('\nüîç === TESTE 1: VALIDA√á√ÉO DE C√ìDIGO ===');
  
  const { response, data } = await fazerRequisicao(`${BASE_URL}/api/fidelidade/validar-codigo`, {
    method: 'POST',
    body: JSON.stringify({
      codigo: TESTE_DADOS.codigo_convite,
      cpf: TESTE_DADOS.cpf.replace(/\D/g, ''),
      bar_id: TESTE_DADOS.bar_id
    })
  });

  if (response.ok) {
    console.log('‚úÖ C√≥digo validado com sucesso!');
    return data.validation_token;
  } else {
    console.log('‚ùå Falha na valida√ß√£o do c√≥digo');
    throw new Error(data.error);
  }
}

// 2. Testar cria√ß√£o de membro
async function testarCriacaoMembro() {
  console.log('\nüë§ === TESTE 2: CRIA√á√ÉO DE MEMBRO ===');
  
  const { response, data } = await fazerRequisicao(`${BASE_URL}/api/fidelidade/membros`, {
    method: 'POST',
    body: JSON.stringify({
      codigo_convite: TESTE_DADOS.codigo_convite,
      cpf: TESTE_DADOS.cpf,
      nome: TESTE_DADOS.nome,
      email: TESTE_DADOS.email,
      telefone: TESTE_DADOS.telefone,
      data_nascimento: TESTE_DADOS.data_nascimento,
      endereco: TESTE_DADOS.endereco,
      bar_id: TESTE_DADOS.bar_id
    })
  });

  if (response.ok) {
    console.log('‚úÖ Membro criado com sucesso!');
    return data.membro;
  } else {
    console.log('‚ùå Falha na cria√ß√£o do membro');
    throw new Error(data.error);
  }
}

// 3. Testar pagamento PIX
async function testarPagamentoPIX(membroId) {
  console.log('\nüí∞ === TESTE 3: PAGAMENTO PIX ===');
  
  const { response, data } = await fazerRequisicao(`${BASE_URL}/api/fidelidade/pagamento/mercado-pago`, {
    method: 'PUT',
    body: JSON.stringify({
      membro_id: membroId,
      valor: 100.00,
      recurring: false
    })
  });

  if (response.ok) {
    console.log('‚úÖ PIX gerado com sucesso!');
    if (data.demo_mode) {
      console.log('üîß Modo demonstra√ß√£o ativo');
    } else {
      console.log('üîó QR Code PIX:', data.qr_code);
    }
    return data;
  } else {
    console.log('‚ùå Falha no pagamento PIX');
    throw new Error(data.error);
  }
}

// 4. Testar pagamento Cart√£o
async function testarPagamentoCartao(membroId) {
  console.log('\nüí≥ === TESTE 4: PAGAMENTO CART√ÉO ===');
  
  const { response, data } = await fazerRequisicao(`${BASE_URL}/api/fidelidade/pagamento/mercado-pago`, {
    method: 'POST',
    body: JSON.stringify({
      membro_id: membroId,
      payment_method: 'credit_card',
      valor: 100.00,
      recurring: false
    })
  });

  if (response.ok) {
    console.log('‚úÖ Cart√£o processado com sucesso!');
    if (data.demo_mode) {
      console.log('üîß Modo demonstra√ß√£o ativo');
    } else {
      console.log('üîó URL Checkout:', data.init_point);
    }
    return data;
  } else {
    console.log('‚ùå Falha no pagamento Cart√£o');
    if (response.status === 501) {
      console.log('‚ÑπÔ∏è Cart√£o ainda n√£o implementado (esperado)');
      return null;
    }
    throw new Error(data.error);
  }
}

// 5. Verificar vari√°veis de ambiente
async function verificarVariaveisAmbiente() {
  console.log('\nüîß === VERIFICA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE ===');
  
  // Criar um membro tempor√°rio para testar as vari√°veis
  const { response, data } = await fazerRequisicao(`${BASE_URL}/api/fidelidade/pagamento/mercado-pago`, {
    method: 'PUT',
    body: JSON.stringify({
      membro_id: 'test',
      valor: 1.00
    })
  });

  console.log('üìä Resultado da verifica√ß√£o de ENV:', {
    status: response.status,
    temAccessToken: data.details ? data.details.includes('ACCESS_TOKEN') : 'n√£o informado',
    modoDemo: data.demo_mode || false
  });
}

// Fun√ß√£o principal que executa todos os testes
async function executarTodosTestes() {
  console.log('üöÄ INICIANDO TESTES DO SISTEMA DE PAGAMENTO');
  console.log('=' .repeat(60));

  try {
    // Verificar vari√°veis primeiro
    await verificarVariaveisAmbiente();

    // 1. Validar c√≥digo
    const validationToken = await testarValidacaoCodigo();

    // 2. Criar membro
    const membro = await testarCriacaoMembro();

    // 3. Testar PIX
    const pixResult = await testarPagamentoPIX(membro.id);

    // 4. Testar Cart√£o (pode falhar, ok)
    try {
      const cartaoResult = await testarPagamentoCartao(membro.id);
    } catch (error) {
      console.log('‚ÑπÔ∏è Cart√£o falhou conforme esperado:', error.message);
    }

    console.log('\nüéâ === RESUMO DOS TESTES ===');
    console.log('‚úÖ Valida√ß√£o de c√≥digo: OK');
    console.log('‚úÖ Cria√ß√£o de membro: OK');
    console.log('‚úÖ Pagamento PIX: OK');
    console.log('‚ÑπÔ∏è Pagamento Cart√£o: N√£o implementado (OK)');
    
    console.log('\nüìã Dados do membro criado:');
    console.log(`   ID: ${membro.id}`);
    console.log(`   Nome: ${membro.nome}`);
    console.log(`   Email: ${membro.email}`);
    console.log(`   Plano: ${membro.plano}`);
    
    if (pixResult && !pixResult.demo_mode) {
      console.log('\nüí∞ Dados do PIX:');
      console.log(`   Payment ID: ${pixResult.payment_id}`);
      console.log(`   Status: ${pixResult.status}`);
    }

  } catch (error) {
    console.error('\n‚ùå ERRO DURANTE OS TESTES:', error.message);
    console.log('\nüîç POSS√çVEIS CAUSAS:');
    console.log('   1. Servidor n√£o est√° rodando (npm run dev)');
    console.log('   2. C√≥digo de convite j√° foi usado');
    console.log('   3. CPF j√° cadastrado no sistema');
    console.log('   4. Problemas de conectividade com Supabase');
    console.log('   5. Vari√°veis de ambiente do Mercado Pago');
  }

  console.log('\n' + '='.repeat(60));
  console.log('üèÅ TESTES FINALIZADOS');
}

// ‚ö†Ô∏è FUN√á√ÉO DE LIMPEZA (USE COM CUIDADO!)
async function limparDadosTeste() {
  console.log('\nüßπ === LIMPEZA DE DADOS DE TESTE ===');
  console.log('‚ö†Ô∏è ATEN√á√ÉO: Esta fun√ß√£o ir√° remover dados de teste!');
  
  // Simular confirma√ß√£o (em um ambiente real, voc√™ usaria readline)
  const confirmar = true; // Mude para false se n√£o quiser limpar
  
  if (!confirmar) {
    console.log('‚ùå Limpeza cancelada');
    return;
  }

  try {
    // Remover membro de teste
    const { response: deleteResponse } = await fazerRequisicao(`${BASE_URL}/api/fidelidade/membros?cpf=${TESTE_DADOS.cpf.replace(/\D/g, '')}`, {
      method: 'DELETE'
    });

    if (deleteResponse.ok) {
      console.log('‚úÖ Dados de teste removidos');
    } else {
      console.log('‚ÑπÔ∏è Nenhum dado de teste encontrado para remover');
    }
  } catch (error) {
    console.log('‚ùå Erro na limpeza:', error.message);
  }
}

// Executar quando o script for chamado diretamente
if (typeof window === 'undefined') {
  // Executar no Node.js
  console.log('üß™ Executando testes no Node.js...');
  
  // Verificar se fetch est√° dispon√≠vel (Node 18+)
  if (typeof fetch === 'undefined') {
    console.log('‚ùå fetch n√£o est√° dispon√≠vel. Use Node.js 18+ ou instale node-fetch');
    process.exit(1);
  }
  
  executarTodosTestes().then(() => {
    console.log('\n‚ú® Script finalizado. Para limpar dados de teste, execute:');
    console.log('   node exemplo_teste/teste-pagamento-completo.js --limpar');
  });
}

// Exportar fun√ß√µes para uso em outros scripts
if (typeof module !== 'undefined') {
  module.exports = {
    executarTodosTestes,
    testarValidacaoCodigo,
    testarCriacaoMembro,
    testarPagamentoPIX,
    testarPagamentoCartao,
    limparDadosTeste,
    TESTE_DADOS
  };
}
