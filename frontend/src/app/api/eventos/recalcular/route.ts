import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { authenticateUser } from '@/middleware/auth';

export const dynamic = 'force-dynamic'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ API Recalcular Eventos - Iniciando');

    // Autentica√ß√£o
    const user = await authenticateUser(request);
    if (!user) {
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 });
    }

    const { data_inicio, data_fim, force_all } = await request.json();

    console.log('üìÖ Par√¢metros:', { data_inicio, data_fim, force_all });

    let totalRecalculados = 0;

    if (force_all) {
      // Recalcular todos os eventos pendentes
      console.log('üîÑ Recalculando eventos pendentes...');
      
      const { data: eventosPendentes, error: selectError } = await supabase
        .from('eventos_base')
        .select('id')
        .eq('precisa_recalculo', true)
        .limit(50);

      if (selectError) {
        console.error('‚ùå Erro ao buscar eventos pendentes:', selectError);
        throw selectError;
      }

      console.log(`üìä Encontrados ${eventosPendentes?.length || 0} eventos pendentes`);

      // Recalcular cada evento individualmente
      for (const evento of eventosPendentes || []) {
        try {
          const { error: calcError } = await supabase
            .rpc('calculate_evento_metrics', { evento_id: evento.id });

          if (calcError) {
            console.error(`‚ùå Erro ao recalcular evento ${evento.id}:`, calcError);
          } else {
            totalRecalculados++;
            console.log(`‚úÖ Evento ${evento.id} recalculado`);
          }
        } catch (error) {
          console.error(`‚ùå Erro ao recalcular evento ${evento.id}:`, error);
        }
      }

    } else {
      // Recalcular eventos de um per√≠odo espec√≠fico
      const startDate = data_inicio || '2025-08-01';
      const endDate = data_fim || '2025-08-31';
      
      console.log(`üîÑ Recalculando eventos do per√≠odo ${startDate} a ${endDate}...`);

      // Primeiro, marcar eventos do per√≠odo para rec√°lculo
      const { error: updateError } = await supabase
        .from('eventos_base')
        .update({ 
          precisa_recalculo: true,
          atualizado_em: new Date().toISOString()
        })
        .gte('data_evento', startDate)
        .lte('data_evento', endDate);

      if (updateError) {
        console.error('‚ùå Erro ao marcar eventos para rec√°lculo:', updateError);
        throw updateError;
      }

      // Buscar eventos do per√≠odo
      const { data: eventosPer√≠odo, error: selectError } = await supabase
        .from('eventos_base')
        .select('id, data_evento, nome')
        .gte('data_evento', startDate)
        .lte('data_evento', endDate)
        .order('data_evento')
        .limit(50);

      if (selectError) {
        console.error('‚ùå Erro ao buscar eventos do per√≠odo:', selectError);
        throw selectError;
      }

      console.log(`üìä Encontrados ${eventosPer√≠odo?.length || 0} eventos no per√≠odo`);

      // Recalcular cada evento individualmente
      for (const evento of eventosPer√≠odo || []) {
        try {
          const { error: calcError } = await supabase
            .rpc('calculate_evento_metrics', { evento_id: evento.id });

          if (calcError) {
            console.error(`‚ùå Erro ao recalcular evento ${evento.id} (${evento.data_evento}):`, calcError);
          } else {
            totalRecalculados++;
            console.log(`‚úÖ Evento ${evento.id} (${evento.data_evento}) recalculado`);
          }
        } catch (error) {
          console.error(`‚ùå Erro ao recalcular evento ${evento.id}:`, error);
        }
      }
    }

    // Verificar alguns resultados
    const { data: eventosVerificacao, error: verifyError } = await supabase
      .from('eventos_base')
      .select('id, data_evento, nome, te_real, tb_real, real_r, cl_real, calculado_em')
      .gte('data_evento', data_inicio || '2025-08-01')
      .lte('data_evento', data_fim || '2025-08-31')
      .not('te_real', 'is', null)
      .not('tb_real', 'is', null)
      .order('data_evento')
      .limit(10);

    if (verifyError) {
      console.error('‚ùå Erro ao verificar resultados:', verifyError);
    }

    console.log(`‚úÖ Rec√°lculo conclu√≠do! ${totalRecalculados} eventos processados`);
    console.log(`üìä Eventos com te_real/tb_real preenchidos: ${eventosVerificacao?.length || 0}`);

    return NextResponse.json({
      success: true,
      message: `Rec√°lculo conclu√≠do! ${totalRecalculados} eventos processados`,
      total_recalculados: totalRecalculados,
      eventos_com_dados: eventosVerificacao?.length || 0,
      sample_eventos: eventosVerificacao?.slice(0, 5) || [],
      periodo: {
        inicio: data_inicio || '2025-08-01',
        fim: data_fim || '2025-08-31'
      }
    });

  } catch (error) {
    console.error('‚ùå Erro na API de rec√°lculo:', error);
    return NextResponse.json(
      { 
        error: 'Erro interno do servidor',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    );
  }
}
