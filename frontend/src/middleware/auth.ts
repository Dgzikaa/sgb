import { NextRequest, NextResponse } from 'next/server'
import { getAdminClient } from '@/lib/supabase-admin'

// Tipos para o usu√°rio autenticado
export interface AuthenticatedUser {
  id: number
  user_id: string
  email: string
  nome: string
  role: 'admin' | 'financeiro' | 'funcionario'
  bar_id: number
  modulos_permitidos: string[]
  ativo: boolean
}

// Tipos para permiss√µes
export interface PermissionCheck {
  module: string
  action: 'read' | 'write' | 'delete' | 'admin'
  resource?: string
}

/**
 * Middleware de autentica√ß√£o para APIs
 * Valida o usu√°rio logado via cookie/header
 */
export async function authenticateUser(request: NextRequest): Promise<AuthenticatedUser | null> {
  try {
    // Tentar pegar token do header Authorization
    let userToken = request.headers.get('authorization')?.replace('Bearer ', '')
    
    // Se n√£o tem no header, tentar no cookie
    if (!userToken) {
      userToken = request.cookies.get('sgb_user')?.value
    }
    
    // Se n√£o tem token, tentar parsear dados do localStorage via cookie
    if (!userToken) {
      // Buscar dados do usu√°rio que o frontend envia via header customizado
      const userDataHeader = request.headers.get('x-user-data')
      if (userDataHeader) {
        try {
          const userData = JSON.parse(decodeURIComponent(userDataHeader))
          if (userData && userData.email && userData.id) {
            return userData as AuthenticatedUser
          }
        } catch (e) {
          console.log('Falha ao parsear x-user-data header')
        }
      }
    }
    
    if (!userToken) {
      console.log('üö´ Nenhum token de autentica√ß√£o encontrado')
      return null
    }
    
    // Tentar parsear o token como JSON (dados do usu√°rio)
    try {
      const userData = JSON.parse(decodeURIComponent(userToken))
      
      if (!userData || !userData.email || !userData.id) {
        console.log('üö´ Token inv√°lido - dados incompletos')
        return null
      }
      
      // Validar se o usu√°rio ainda existe e est√° ativo
      const supabase = await getAdminClient()
      const { data: usuario, error } = await supabase
        .from('usuarios_bar')
        .select('*')
        .eq('id', userData.id)
        .eq('ativo', true)
        .single()
      
      if (error || !usuario) {
        console.log('üö´ Usu√°rio n√£o encontrado ou inativo:', userData.email)
        return null
      }
      
      console.log('‚úÖ Usu√°rio autenticado:', usuario.nome)
      return usuario as AuthenticatedUser
      
    } catch (parseError) {
      console.log('üö´ Erro ao parsear token de usu√°rio:', parseError)
      return null
    }
    
  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error)
    return null
  }
}

/**
 * Verificar permiss√µes do usu√°rio
 */
export function checkPermission(user: AuthenticatedUser, permission: PermissionCheck): boolean {
  // Admin pode tudo
  if ((user.role as string) === 'admin') {
    return true
  }
  
  // Verificar permiss√µes espec√≠ficas do m√≥dulo
  const modulePermissions = user.modulos_permitidos || []
  
  switch (permission.module) {
    case 'checklists':
      switch (permission.action) {
        case 'read':
          // Todos podem ler checklists
          return modulePermissions.includes('checklists') || 
                 modulePermissions.includes('checklists_read') ||
                 user.role === 'financeiro'
        
        case 'write':
          // Financeiro e admin podem criar/editar
          return user.role === 'financeiro' || 
                 modulePermissions.includes('checklists_write') ||
                 modulePermissions.includes('checklists_admin')
        
        case 'delete':
          // S√≥ admin pode deletar
          return (user.role as string) === 'admin' || 
                 modulePermissions.includes('checklists_admin')
        
        case 'admin':
          // S√≥ admin tem acesso total
          return (user.role as string) === 'admin'
        
        default:
          return false
      }
    
    default:
      return false
  }
}

/**
 * Resposta de erro de autentica√ß√£o
 */
export function authErrorResponse(message: string = 'N√£o autorizado', status: number = 401) {
  return NextResponse.json({
    success: false,
    error: message,
    code: 'AUTH_ERROR'
  }, { status })
}

/**
 * Resposta de erro de permiss√£o
 */
export function permissionErrorResponse(message: string = 'Permiss√£o negada', status: number = 403) {
  return NextResponse.json({
    success: false,
    error: message,
    code: 'PERMISSION_DENIED'
  }, { status })
}

// Lista de rotas que requerem autentica√ß√£o
export const PROTECTED_ROUTES = [
  '/api/admin',
  '/api/dashboard',
      '/api/windsor-auth',
    '/api/windsor-sync',
    '/api/nibo-auth',
    '/api/nibo-sync'
]

// Lista de rotas p√∫blicas (podem ser acessadas sem auth)
export const PUBLIC_ROUTES = [
  '/api/config', // Temporariamente p√∫blico at√© implementar auth adequada
  '/api/relatorios' // Dados agregados, sem informa√ß√µes sens√≠veis
]

export function requiresAuth(pathname: string): boolean {
  // Verificar se √© uma rota protegida
  return PROTECTED_ROUTES.some(route => pathname.startsWith(route))
}

export function isPublicRoute(pathname: string): boolean {
  // Verificar se √© uma rota explicitamente p√∫blica
  return PUBLIC_ROUTES.some(route => pathname.startsWith(route))
} 
